{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { estilos } from \"./estilos\";\nimport { useState } from \"react\";\nimport { cadastrarPais, atualizarPais } from \"../../servicos/firestore\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ManterPais(_ref) {\n  var _route$params, _route$params2, _route$params3;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useState = useState(route == null ? void 0 : (_route$params = route.params) == null ? void 0 : _route$params.nomePais),\n    _useState2 = _slicedToArray(_useState, 2),\n    nomePais = _useState2[0],\n    setNomePais = _useState2[1];\n  var _useState3 = useState(route == null ? void 0 : (_route$params2 = route.params) == null ? void 0 : _route$params2.capitalPais),\n    _useState4 = _slicedToArray(_useState3, 2),\n    capitalPais = _useState4[0],\n    setcapitalPais = _useState4[1];\n  var _useState5 = useState(route == null ? void 0 : (_route$params3 = route.params) == null ? void 0 : _route$params3.continentePais),\n    _useState6 = _slicedToArray(_useState5, 2),\n    continentePais = _useState6[0],\n    setcontinentePais = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    statusErro = _useState8[0],\n    setStatusErro = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    mensagemErro = _useState10[0],\n    setMensagemErro = _useState10[1];\n  function salvarPais() {\n    return _salvarPais.apply(this, arguments);\n  }\n  function _salvarPais() {\n    _salvarPais = _asyncToGenerator(function* () {\n      if (nomePais == '') {\n        setStatusErro('Nome');\n        setMensagemErro('O campo não pode ser vazio');\n      } else if (capitalPais == '') {\n        setStatusErro('Capital');\n        setMensagemErro('O Pais deve ter um valor');\n      } else if (continentePais == '') {\n        setStatusErro('Continente');\n        setMensagemErro('O campo não pode ser vazio');\n      } else {\n        setStatusErro('');\n        var resultado = '';\n        if (route != null && route.params) {\n          var _route$params4;\n          resultado = yield atualizarPais(route == null ? void 0 : (_route$params4 = route.params) == null ? void 0 : _route$params4.id, {\n            nomePais: nomePais,\n            capitalPais: capitalPais,\n            continentePais: continentePais\n          });\n        } else {\n          resultado = yield cadastrarPais({\n            nomePais: nomePais,\n            capitalPais: capitalPais,\n            continentePais: continentePais\n          });\n        }\n        if (resultado == 'erro') {\n          Alert.alert('Erro ao cadastrar país');\n        } else {\n          setNomePais('');\n          setcapitalPais('');\n          navigation.navigate('ListarPais');\n        }\n      }\n    });\n    return _salvarPais.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    style: estilos.container,\n    children: [_jsx(TextInput, {\n      label: \"Pa\\xEDs\",\n      value: nomePais,\n      onChangeText: setNomePais,\n      mode: \"outlined\",\n      error: statusErro == 'Descricao',\n      outlineColor: \"#404040\",\n      activeOutlineColor: \"#F4C095\",\n      textColor: \"#F4C095\",\n      style: estilos.input\n    }), statusErro == 'Descricao' ? _jsx(HelperText, {\n      type: \"error\",\n      visible: statusErro == 'Descricao',\n      children: mensagemErro\n    }) : null, _jsx(TextInput, {\n      label: \"Capital\",\n      value: capitalPais,\n      onChangeText: setcapitalPais,\n      mode: \"outlined\",\n      outlineColor: \"#404040\",\n      activeOutlineColor: \"#F4C095\",\n      textColor: \"#F4C095\",\n      style: estilos.input\n    }), statusErro == 'Preco' ? _jsx(HelperText, {\n      type: \"error\",\n      visible: statusErro == 'Preco',\n      children: mensagemErro\n    }) : null, _jsx(TextInput, {\n      label: \"Continente\",\n      value: continentePais,\n      onChangeText: setcontinentePais,\n      mode: \"outlined\",\n      outlineColor: \"#404040\",\n      activeOutlineColor: \"#F4C095\",\n      textColor: \"#F4C095\",\n      style: estilos.input\n    }), statusErro == 'regiao' ? _jsx(HelperText, {\n      type: \"error\",\n      visible: statusErro == 'regiao',\n      children: mensagemErro\n    }) : null, _jsx(TouchableOpacity, {\n      style: estilos.botao,\n      onPress: function onPress() {\n        return salvarPais();\n      },\n      children: _jsx(Text, {\n        style: estilos.texto,\n        children: \"Cadastrar\"\n      })\n    })]\n  });\n}","map":{"version":3,"names":["TextInput","HelperText","estilos","useState","cadastrarPais","atualizarPais","jsx","_jsx","jsxs","_jsxs","ManterPais","_ref","_route$params","_route$params2","_route$params3","navigation","route","_useState","params","nomePais","_useState2","_slicedToArray","setNomePais","_useState3","capitalPais","_useState4","setcapitalPais","_useState5","continentePais","_useState6","setcontinentePais","_useState7","_useState8","statusErro","setStatusErro","_useState9","_useState10","mensagemErro","setMensagemErro","salvarPais","_salvarPais","apply","arguments","_asyncToGenerator","resultado","_route$params4","id","Alert","alert","navigate","View","style","container","children","label","value","onChangeText","mode","error","outlineColor","activeOutlineColor","textColor","input","type","visible","TouchableOpacity","botao","onPress","Text","texto"],"sources":["C:/Users/manel/Documents/Projeto-3-BIM-PMovel-main/src/Componentes/addPais/index.js"],"sourcesContent":["import { View, TouchableOpacity, Text, Alert } from \"react-native\";\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { estilos } from \"./estilos\";\nimport { useState } from \"react\";\nimport { cadastrarPais, atualizarPais } from \"../../servicos/firestore\";\n\nexport function ManterPais({ navigation, route }) {\n    const [nomePais, setNomePais] = useState(route?.params?.nomePais)\n    const [capitalPais, setcapitalPais] = useState(route?.params?.capitalPais)\n    const [continentePais, setcontinentePais] = useState(route?.params?.continentePais)\n    const [statusErro, setStatusErro] = useState('')\n    const [mensagemErro, setMensagemErro] = useState('')\n    async function salvarPais() {\n        if (nomePais == '') {\n            setStatusErro('Nome')\n            setMensagemErro('O campo não pode ser vazio')\n        } else if (capitalPais == '') {\n            setStatusErro('Capital')\n            setMensagemErro('O Pais deve ter um valor')\n        } \n        else if (continentePais == '') {\n            setStatusErro('Continente')\n            setMensagemErro('O campo não pode ser vazio')\n        }\n        else {\n            setStatusErro('')\n            let resultado = ''\n            if (route?.params) {\n                resultado = await atualizarPais(route?.params?.id, { nomePais, capitalPais, continentePais })\n            }\n            else {\n                resultado = await cadastrarPais({ nomePais, capitalPais, continentePais })\n            }\n            if (resultado == 'erro') {\n                Alert.alert('Erro ao cadastrar país')\n            } else {\n                setNomePais('')\n                setcapitalPais('')\n                navigation.navigate('ListarPais') \n            }\n        }\n    }\n    return (\n        <View style={estilos.container}>\n            <TextInput\n                label=\"País\"\n                value={nomePais}\n                onChangeText={setNomePais}\n                mode=\"outlined\"\n                error={statusErro == 'Descricao'}\n                outlineColor=\"#404040\"\n                activeOutlineColor=\"#F4C095\" \n                textColor=\"#F4C095\"\n                style={estilos.input} />\n            {statusErro == 'Descricao' ? <HelperText type=\"error\" visible={statusErro == 'Descricao'}>\n                {mensagemErro}\n            </HelperText> : null}\n            <TextInput\n                label=\"Capital\"\n                value={capitalPais}\n                onChangeText={setcapitalPais}\n                mode=\"outlined\"\n                outlineColor=\"#404040\"\n                activeOutlineColor=\"#F4C095\" \n                textColor=\"#F4C095\"\n                style={estilos.input} />\n            {statusErro == 'Preco' ? <HelperText type=\"error\" visible={statusErro == 'Preco'}>\n                {mensagemErro}\n            </HelperText> : null}\n            <TextInput\n                label=\"Continente\"\n                value={continentePais}\n                onChangeText={setcontinentePais}\n                mode=\"outlined\"\n                outlineColor=\"#404040\"\n                activeOutlineColor=\"#F4C095\" \n                textColor=\"#F4C095\"\n                style={estilos.input} />\n            {statusErro == 'regiao' ? <HelperText type=\"error\" visible={statusErro == 'regiao'}>\n                {mensagemErro}\n            </HelperText> : null}\n            <TouchableOpacity\n                style={estilos.botao} onPress={() => salvarPais()}>\n                <Text style={estilos.texto}>Cadastrar</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}