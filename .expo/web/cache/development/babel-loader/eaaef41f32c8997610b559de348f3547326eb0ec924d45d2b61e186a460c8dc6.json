{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { TextInput, HelperText, Snackbar } from 'react-native-paper';\nimport { logar } from \"../../servicos/requisicoesFirebase\";\nimport { styles } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function TelaSenha(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    password = _useState2[0],\n    setPassword = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    secureMode = _useState4[0],\n    setSecureMode = _useState4[1];\n  var handleLogin = function handleLogin() {\n    if (password === 'sua_senha_secreta') {\n      navigation.navigate('PaginaProtegida');\n    } else {\n      alert('Senha incorreta. Tente novamente.');\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      style: styles.imagem,\n      source: require(\"../../../assets/LOGO.png\")\n    }), _jsx(Text, {\n      style: styles.title,\n      children: \"Login\"\n    }), _jsx(TextInput, {\n      label: \"E-mail\",\n      value: email,\n      onChangeText: setEmail,\n      mode: \"outlined\",\n      keyboardType: \"email-address\",\n      error: statusError == 'email',\n      style: styles.input,\n      outlineColor: \"rgba(0, 0, 0, 0)\",\n      activeOutlineColor: \"rgba(20, 20, 20, 0.2)\",\n      textColor: \"#141414\"\n    }), statusError == 'email' ? _jsx(HelperText, {\n      type: \"error\",\n      visible: statusError == 'email',\n      children: mensagemError\n    }) : null, _jsx(TextInput, {\n      label: \"Senha\",\n      value: senha,\n      onChangeText: setSenha,\n      mode: \"outlined\",\n      error: statusError == 'senha',\n      secureTextEntry: secureMode,\n      right: _jsx(TextInput.Icon, {\n        icon: secureMode ? 'eye-off' : 'eye',\n        onPress: function onPress() {\n          return setSecureMode(!secureMode);\n        }\n      }),\n      outlineColor: \"rgba(0, 0, 0, 0)\",\n      activeOutlineColor: \"rgba(20, 20, 20, 0.2)\",\n      textColor: \"#141414\",\n      style: styles.input\n    }), statusError == 'senha' ? _jsx(HelperText, {\n      type: \"error\",\n      visible: statusError == 'senha',\n      children: mensagemError\n    }) : null, _jsx(TouchableOpacity, {\n      style: styles.botao,\n      onPress: function onPress() {\n        return fazerLogin();\n      },\n      children: _jsx(Text, {\n        style: styles.textoButton,\n        children: \"Entrar\"\n      })\n    }), _jsxs(Text, {\n      style: styles.texto,\n      children: [\" Ainda n\\xE3o tem uma conta?\", _jsx(Text, {\n        style: styles.textoLink,\n        onPress: function onPress() {\n          return navigation.navigate('Cadastrar');\n        },\n        children: \" Cadastre-se\"\n      })]\n    }), _jsx(Snackbar, {\n      visible: statusSnakbar,\n      onDismiss: function onDismiss() {\n        return setStatusSnakbar(false);\n      },\n      duration: 2000,\n      action: {\n        label: 'OK',\n        onPress: function onPress() {\n          setStatusSnakbar(false);\n        }\n      },\n      children: mensagemSnakbar\n    })]\n  });\n}\n;","map":{"version":3,"names":["useState","View","Text","Image","TouchableOpacity","TextInput","HelperText","Snackbar","logar","styles","jsx","_jsx","jsxs","_jsxs","TelaSenha","_ref","navigation","_useState","_useState2","_slicedToArray","password","setPassword","_useState3","_useState4","secureMode","setSecureMode","handleLogin","navigate","alert","style","container","children","imagem","source","require","title","label","value","email","onChangeText","setEmail","mode","keyboardType","error","statusError","input","outlineColor","activeOutlineColor","textColor","type","visible","mensagemError","senha","setSenha","secureTextEntry","right","Icon","icon","onPress","botao","fazerLogin","textoButton","texto","textoLink","statusSnakbar","onDismiss","setStatusSnakbar","duration","action","mensagemSnakbar"],"sources":["C:/Users/manel/Documents/Projeto-3-BIM-PMovel-main/src/Componentes/TelaSenha/TelaSenha.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { View, Text, Image, TouchableOpacity } from \"react-native\";\r\nimport { TextInput, HelperText, Snackbar } from 'react-native-paper';\r\nimport { logar } from \"../../servicos/requisicoesFirebase\";\r\nimport { styles } from \"./styles\"\r\nexport function TelaSenha({ navigation }) {\r\n    const [password, setPassword] = useState('');\r\n    const [secureMode, setSecureMode] = useState(true);\r\n\r\n    const handleLogin = () => {\r\n        if (password === 'sua_senha_secreta') {\r\n            navigation.navigate('PaginaProtegida');\r\n        } else {\r\n            alert('Senha incorreta. Tente novamente.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <Image style={styles.imagem}\r\n                source={require(\"../../../assets/LOGO.png\")}\r\n            />\r\n            <Text style={styles.title}>\r\n                Login\r\n            </Text>\r\n            <TextInput\r\n                label=\"E-mail\"\r\n                value={email}\r\n                onChangeText={setEmail}\r\n                mode=\"outlined\"\r\n                keyboardType=\"email-address\"\r\n                error={statusError == 'email'}\r\n                style={styles.input}\r\n                outlineColor=\"rgba(0, 0, 0, 0)\"\r\n                activeOutlineColor=\"rgba(20, 20, 20, 0.2)\" \r\n                textColor=\"#141414\"\r\n            />\r\n            {statusError == 'email' ? <HelperText type=\"error\" visible={statusError == 'email'}>\r\n                {mensagemError}\r\n            </HelperText> : null}\r\n            <TextInput\r\n                label=\"Senha\"\r\n                value={senha}\r\n                onChangeText={setSenha}\r\n                mode=\"outlined\"\r\n                error={statusError == 'senha'}\r\n                secureTextEntry={secureMode}\r\n                right={\r\n                    <TextInput.Icon\r\n                        icon={secureMode ? 'eye-off' : 'eye'}\r\n                        onPress={() => setSecureMode(!secureMode)}\r\n                    />\r\n                }\r\n                outlineColor=\"rgba(0, 0, 0, 0)\"\r\n                activeOutlineColor=\"rgba(20, 20, 20, 0.2)\" \r\n                textColor=\"#141414\"\r\n                style={styles.input} />\r\n            {statusError == 'senha' ? <HelperText type=\"error\" visible={statusError == 'senha'}>\r\n                {mensagemError}\r\n            </HelperText> : null}\r\n            <TouchableOpacity style={styles.botao} onPress={() => fazerLogin()}>\r\n                <Text style={styles.textoButton}>Entrar</Text>\r\n            </TouchableOpacity>\r\n            <Text style={styles.texto}> Ainda n√£o tem uma conta?\r\n                <Text style={styles.textoLink}\r\n                    onPress={() => navigation.navigate('Cadastrar')}> Cadastre-se</Text>\r\n            </Text>\r\n            <Snackbar visible={statusSnakbar} onDismiss={() => setStatusSnakbar(false)} duration={2000}\r\n                action={{\r\n                    label: 'OK',\r\n                    onPress: () => {\r\n                        setStatusSnakbar(false)\r\n                    },\r\n                }}>\r\n                {mensagemSnakbar} \r\n            </Snackbar>\r\n        </View>\r\n    );\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}